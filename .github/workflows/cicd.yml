name: Pokedex CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FRONTEND_IMAGE_NAME: pokedex-frontend
  BACKEND_IMAGE_NAME: pokedex-backend
  DOCKER_REGISTRY: docker.io
  AWS_REGION: us-east-1

jobs:
  # 1. Test Application
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend Tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
        continue-on-error: true

      # Backend Tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test
        env:
          DEBUG: 'True'
          DB_HOST: 'localhost'
          DB_NAME: 'test_db'
          DB_USER: 'postgres'
          DB_PASS: 'postgres'
          SECRET_KEY: 'test-key-for-ci'

  # 2. Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pokedex-frontend:latest
          cache-from:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-frontend:buildcache
          cache-to:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-frontend:buildcache,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pokedex-backend:latest
          cache-from:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-backend:buildcache
          cache-to:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-backend:buildcache,mode=max

  # 3. Provision and Deploy
  deploy:
    name: Provision Infrastructure and Deploy
    needs: build
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get-ip.outputs.instance_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform-ec2
          chmod 600 ~/.ssh/terraform-ec2
          ssh-keygen -y -f ~/.ssh/terraform-ec2 > ~/.ssh/terraform-ec2.pub

      - name: Create terraform.tfvars file
        run: |
          cat > terraform.tfvars << EOF
          instance_type = "t2.micro"
          app_name = "pokedex-app"
          ssh_public_key = "$(cat ~/.ssh/terraform-ec2.pub)"
          EOF

      - name: Terraform Init
        run: terraform init

      # Clean up existing resources
      - name: Clean up existing Terraform resources
        run: |
          echo "Starting complete cleanup of Terraform resources..."

          # Create a targeted destroy script to ensure proper dependency order
          cat > cleanup.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "=== TERRAFORM CLEANUP SCRIPT ==="

          # First identify resources to ensure they exist before attempting to destroy
          echo "Identifying existing resources..."

          # Get the app_name from terraform.tfvars or use default
          APP_NAME=$(grep -o 'app_name.*=.*".*"' terraform.tfvars | cut -d'"' -f2 || echo "pokedex-app")
          echo "Using app name: $APP_NAME"

          # Step 1: Destroy EC2 instances first (they depend on other resources)
          echo "Destroying EC2 instances..."
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$APP_NAME" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -n "$INSTANCE_IDS" ]; then
            echo "Found instances to destroy: $INSTANCE_IDS"
            for ID in $INSTANCE_IDS; do
              aws ec2 terminate-instances --instance-ids $ID
              echo "Waiting for instance $ID to terminate..."
              aws ec2 wait instance-terminated --instance-ids $ID
            done
          else
            echo "No EC2 instances found"
          fi

          # Step 2: Release Elastic IPs
          echo "Releasing Elastic IPs..."
          ALLOCATION_IDS=$(aws ec2 describe-addresses --filters "Name=tag:Name,Values=$APP_NAME" --query "Addresses[].AllocationId" --output text || aws ec2 describe-addresses --query "Addresses[].AllocationId" --output text)
          if [ -n "$ALLOCATION_IDS" ]; then
            echo "Found Elastic IPs to release: $ALLOCATION_IDS"
            for ID in $ALLOCATION_IDS; do
              aws ec2 release-address --allocation-id $ID
            done
          else
            echo "No Elastic IPs found"
          fi

          # Step 3: Delete security groups
          echo "Deleting security groups..."
          SG_IDS=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=$APP_NAME-sg" --query "SecurityGroups[].GroupId" --output text)
          if [ -n "$SG_IDS" ]; then
            echo "Found security groups to delete: $SG_IDS"
            for ID in $SG_IDS; do
              # First remove all ingress and egress rules to avoid dependency issues
              aws ec2 revoke-security-group-ingress --group-id $ID --ip-permissions "$(aws ec2 describe-security-groups --group-ids $ID --query "SecurityGroups[0].IpPermissions" --output json)" || echo "No ingress rules to revoke"
              aws ec2 revoke-security-group-egress --group-id $ID --ip-permissions "$(aws ec2 describe-security-groups --group-ids $ID --query "SecurityGroups[0].IpPermissionsEgress" --output json)" || echo "No egress rules to revoke"
              sleep 5
              aws ec2 delete-security-group --group-id $ID
            done
          else
            echo "No security groups found"
          fi

          # Step 4: Delete key pairs
          echo "Deleting key pairs..."
          KEY_PAIRS=$(aws ec2 describe-key-pairs --filters "Name=key-name,Values=$APP_NAME-key" --query "KeyPairs[].KeyName" --output text)
          if [ -n "$KEY_PAIRS" ]; then
            echo "Found key pairs to delete: $KEY_PAIRS"
            for KEY in $KEY_PAIRS; do
              aws ec2 delete-key-pair --key-name $KEY
            done
          else
            echo "No key pairs found"
          fi

          echo "Resource cleanup completed successfully!"
          EOF

          # Make the script executable
          chmod +x cleanup.sh

          # Run the cleanup script
          ./cleanup.sh

          echo "Cleanup completed. Terraform state should now be clean."

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get Instance IP
        id: get-ip
        run: |
          # Get the raw outputs and clean them up
          INSTANCE_ID=$(terraform output -raw instance_id | grep -oE '[a-zA-Z0-9_-]+' | head -1)
          IP_ADDRESS=$(terraform output -raw instance_public_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)

          # Set the outputs properly
          echo "instance_ip=${IP_ADDRESS}" >> $GITHUB_OUTPUT
          echo "INSTANCE_IP=${IP_ADDRESS}" >> $GITHUB_ENV

          # Debug what we're setting
          echo "Found instance IP: ${IP_ADDRESS}"

      - name: Wait for instance to initialize
        run: |
          echo "Waiting for instance to initialize..."
          sleep 60

      - name: Copy configuration files
        run: |
          # Create directory structure first
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "mkdir -p ~/pokedex-app"

          # Then copy files
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ./docker-compose.yml ubuntu@$INSTANCE_IP:~/pokedex-app/

          # Copy nginx.conf to the server if it exists
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ./frontend/nginx.conf ubuntu@$INSTANCE_IP:~/pokedex-app/ || echo "nginx.conf not found, skipping"

      - name: Deploy with Docker Compose
        run: |
          # Create a simplified deployment script
          cat > deploy-docker.sh << 'EOF'
          #!/bin/bash
          set -e  # Exit on any error

          echo "========== DOCKER DEPLOYMENT START =========="
          echo "Running as user: $(whoami)"

          # Create app directory
          mkdir -p ~/pokedex-app
          cd ~/pokedex-app
          echo "Working directory: $(pwd)"

          # Get server IP
          SERVER_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "Server IP: $SERVER_IP"

          # Function to wait for apt to be available
          wait_for_apt() {
            echo "Waiting for apt to be available..."
            # Wait for any running apt processes to finish
            while ps aux | grep -i apt | grep -v grep > /dev/null; do
              echo "Apt process is running. Waiting..."
              sleep 10
            done
            
            # Remove lock files if they exist
            sudo rm -f /var/lib/apt/lists/lock
            sudo rm -f /var/lib/dpkg/lock
            sudo rm -f /var/lib/dpkg/lock-frontend
            sudo rm -f /var/cache/apt/archives/lock
            
            echo "Apt should be available now"
          }

          # Install Docker using snap instead of apt
          install_docker() {
            echo "Installing Docker using snap..."
            sudo snap install docker
            
            # Add current user to docker group
            sudo addgroup --system docker || true
            sudo adduser $USER docker || true
            
            # Wait for snap installation to complete
            sleep 10
            
            # Verify Docker installation
            which docker || echo "Docker binary not found in PATH"
            sudo docker --version || echo "Docker command failed"
          }

          # If Docker is not installed, install it
          if ! command -v docker &> /dev/null; then
            wait_for_apt
            install_docker
          else
            echo "Docker is already installed: $(docker --version)"
          fi

          # Set up docker-compose
          echo "Setting up docker-compose..."
          if ! command -v docker-compose &> /dev/null; then
            # Create docker-compose wrapper script
            sudo tee /usr/local/bin/docker-compose > /dev/null << 'DCSCRIPT'
          #!/bin/bash
          sudo docker compose "$@"
          DCSCRIPT
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Create environment file
          echo "Creating .env file..."
          cat > .env << ENVFILE
          DB_USER=$DB_USER
          DB_PASS=$DB_PASS
          DB_NAME=$DB_NAME
          API_URL=http://${SERVER_IP}:3000
          DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
          NODE_ENV=production
          DOCKER_HUB_USERNAME=$DOCKER_USERNAME
          ENVFILE

          echo "Contents of .env file:"
          cat .env

          # Create docker-compose.yml file
          echo "Creating docker-compose.yml..."
          cat > docker-compose.yml << DCFILE
          version: '3'

          services:
            frontend:
              image: ${DOCKER_USERNAME}/pokedex-frontend:latest
              restart: always
              ports:
                - "80:80"
              depends_on:
                - backend

            backend:
              image: ${DOCKER_USERNAME}/pokedex-backend:latest
              restart: always
              ports:
                - "3000:3000"
              depends_on:
                - db
              environment:
                - DB_HOST=db
                - DB_USER=${DB_USER}
                - DB_PASS=${DB_PASS}
                - DB_NAME=${DB_NAME}
                - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}

            db:
              image: postgres:14
              restart: always
              volumes:
                - postgres_data:/var/lib/postgresql/data
              environment:
                - POSTGRES_USER=${DB_USER}
                - POSTGRES_PASSWORD=${DB_PASS}
                - POSTGRES_DB=${DB_NAME}

          volumes:
            postgres_data:
          DCFILE

          echo "Contents of docker-compose.yml:"
          cat docker-compose.yml

          # Login to Docker Hub
          echo "Logging into Docker Hub..."
          echo "$DOCKER_TOKEN" | sudo docker login -u "$DOCKER_USERNAME" --password-stdin

          # Stop any existing containers
          echo "Stopping any existing containers..."
          sudo docker-compose down || true

          # Pull images directly (bypass docker-compose pull)
          echo "Pulling images..."
          sudo docker pull ${DOCKER_USERNAME}/pokedex-frontend:latest || {
            echo "Failed to pull frontend image. Checking Docker Hub login status..."
            sudo docker login --username "$DOCKER_USERNAME"
          }
          sudo docker pull ${DOCKER_USERNAME}/pokedex-backend:latest
          sudo docker pull postgres:14

          # Start containers
          echo "Starting containers..."
          sudo docker-compose up -d --force-recreate

          # Check if containers are running
          echo "Checking containers status:"
          sudo docker ps -a

          # Check services
          echo "Checking if services are running:"
          sleep 10  # Give containers time to start
          curl -s -I http://localhost:80 || echo "Frontend not accessible yet"
          curl -s -I http://localhost:3000 || echo "Backend not accessible yet"

          echo "========== DOCKER DEPLOYMENT END =========="
          EOF

          # Make script executable
          chmod +x deploy-docker.sh

          # Copy script to server
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ./deploy-docker.sh ubuntu@$INSTANCE_IP:~/deploy-docker.sh

          # Execute script with environment variables
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "DOCKER_USERNAME='${{ secrets.DOCKER_HUB_USERNAME }}' DOCKER_TOKEN='${{ secrets.DOCKER_HUB_TOKEN }}' DB_USER='${{ secrets.DB_USER || 'admin' }}' DB_PASS='${{ secrets.DB_PASS || 'your_db_password' }}' DB_NAME='${{ secrets.DB_NAME || 'pokedex_db' }}' DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY || 'django-insecure-key' }}' bash ~/deploy-docker.sh"

          # Verify deployment
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "echo 'Final status:' && sudo docker ps && echo 'Service ports:' && sudo ss -tulpn | grep -E ':(80|3000)'"

  # 4. Health Check
  health-check:
    name: Health Check
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check application availability
        run: |
          INSTANCE_IP="${{ needs.deploy.outputs.instance_ip }}"

          echo "Waiting for services to fully start..."
          sleep 30

          echo "Checking frontend at http://$INSTANCE_IP"
          curl -s -f -m 10 -L "http://$INSTANCE_IP" || echo "Frontend not available yet"

          echo "Checking backend API at http://$INSTANCE_IP:3000/admin/"
          curl -s -f -m 10 "http://$INSTANCE_IP:3000/admin/" || echo "Backend API not available yet"

          echo "Application URLs:"
          echo "Frontend: http://$INSTANCE_IP"
          echo "Backend API: http://$INSTANCE_IP:3000"
