name: Pokedex CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FRONTEND_IMAGE_NAME: pokedex-frontend
  BACKEND_IMAGE_NAME: pokedex-backend
  DOCKER_REGISTRY: docker.io
  AWS_REGION: us-east-1

jobs:
  # 1. Test Application
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Frontend Tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
        continue-on-error: true

      # Backend Tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test
        env:
          DEBUG: 'True'
          DB_HOST: 'localhost'
          DB_NAME: 'test_db'
          DB_USER: 'postgres'
          DB_PASS: 'postgres'
          SECRET_KEY: 'test-key-for-ci'

  # 2. Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pokedex-frontend:latest
          cache-from:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-frontend:buildcache
          cache-to:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-frontend:buildcache,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pokedex-backend:latest
          cache-from:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-backend:buildcache
          cache-to:
            type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME
            }}/pokedex-backend:buildcache,mode=max

  # 3. Provision and Deploy
  deploy:
    name: Provision Infrastructure and Deploy
    needs: build
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get-ip.outputs.instance_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform-ec2
          chmod 600 ~/.ssh/terraform-ec2
          ssh-keygen -y -f ~/.ssh/terraform-ec2 > ~/.ssh/terraform-ec2.pub

      - name: Create terraform.tfvars file
        run: |
          cat > terraform.tfvars << EOF
          instance_type = "t2.micro"
          app_name = "pokedex-app"
          ssh_public_key = "$(cat ~/.ssh/terraform-ec2.pub)"
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get Instance IP
        id: get-ip
        run: |
          # Get the raw outputs and clean them up
          INSTANCE_ID=$(terraform output -raw instance_id | grep -oE '[a-zA-Z0-9_-]+' | head -1)
          IP_ADDRESS=$(terraform output -raw instance_public_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)

          # Set the outputs properly
          echo "instance_ip=${IP_ADDRESS}" >> $GITHUB_OUTPUT
          echo "INSTANCE_IP=${IP_ADDRESS}" >> $GITHUB_ENV

          # Debug what we're setting
          echo "Found instance IP: ${IP_ADDRESS}"

      - name: Wait for instance to initialize
        run: |
          echo "Waiting for instance to initialize..."
          sleep 60

      - name: Copy configuration files
        run: |
          # Create directory structure first
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "mkdir -p ~/pokedex-app"

          # Then copy files
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ./docker-compose.yml ubuntu@$INSTANCE_IP:~/pokedex-app/

          # Copy nginx.conf to the server if it exists
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ./frontend/nginx.conf ubuntu@$INSTANCE_IP:~/pokedex-app/ || echo "nginx.conf not found, skipping"

      - name: Deploy with Docker Compose
        run: |
          # Create a simplified deployment script
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          set -e  # Exit on any error

          echo "======= DEPLOYMENT SCRIPT START ======="
          echo "Running as: $(whoami)"
          echo "Current directory: $(pwd)"

          # Create app directory
          mkdir -p ~/pokedex-app
          cd ~/pokedex-app

          # Wait for any apt locks to be released
          echo "Checking for apt locks..."
          while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for apt lock to be released..."
            sleep 5
          done

          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            # First remove any partial installations
            sudo rm -f /var/lib/dpkg/lock-frontend
            sudo rm -f /var/lib/apt/lists/lock
            sudo rm -f /var/cache/apt/archives/lock
            sudo rm -f /var/lib/dpkg/lock
            
            # Update and install
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            
            # Add Docker repository
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          fi

          # Add current user to docker group
          sudo usermod -aG docker $USER

          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Make sure Docker is running
          echo "Ensuring Docker service is running..."
          sudo systemctl start docker
          sudo systemctl enable docker

          # Get the server's public IP
          SERVER_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "Server IP: $SERVER_IP"

          # Create docker-compose.yml file
          echo "Creating docker-compose.yml..."
          cat > docker-compose.yml << EOY
          version: '3'

          services:
            frontend:
              image: $DOCKER_USERNAME/pokedex-frontend:latest
              restart: always
              ports:
                - "80:80"
              depends_on:
                - backend

            backend:
              image: $DOCKER_USERNAME/pokedex-backend:latest
              restart: always
              ports:
                - "3000:3000"
              depends_on:
                - db
              environment:
                - DB_HOST=db
                - DB_USER=$DB_USER
                - DB_PASS=$DB_PASS
                - DB_NAME=$DB_NAME
                - DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY

            db:
              image: postgres:14
              restart: always
              volumes:
                - postgres_data:/var/lib/postgresql/data
              environment:
                - POSTGRES_USER=$DB_USER
                - POSTGRES_PASSWORD=$DB_PASS
                - POSTGRES_DB=$DB_NAME

          volumes:
            postgres_data:
          EOY

          echo "Contents of docker-compose.yml:"
          cat docker-compose.yml

          # Login to Docker Hub
          echo "Logging into Docker Hub..."
          echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin || {
            echo "Failed to log in to Docker Hub, trying with sudo..."
            echo "$DOCKER_TOKEN" | sudo docker login -u "$DOCKER_USERNAME" --password-stdin
          }

          # Stop and remove any existing containers
          echo "Stopping any existing containers..."
          sudo docker-compose down || echo "No containers to stop"

          # Clean up any old containers and images
          echo "Cleaning up old containers and images..."
          sudo docker system prune -f

          # Pull images manually
          echo "Pulling images..."
          sudo docker pull $DOCKER_USERNAME/pokedex-frontend:latest
          sudo docker pull $DOCKER_USERNAME/pokedex-backend:latest
          sudo docker pull postgres:14

          # Start containers
          echo "Starting containers..."
          sudo docker-compose up -d --force-recreate

          # Check containers
          echo "Container status:"
          sudo docker ps -a

          echo "======= DEPLOYMENT SCRIPT END ======="
          EOF

          # Make script executable
          chmod +x deploy-script.sh

          # Copy the script to the server
          scp -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ./deploy-script.sh ubuntu@$INSTANCE_IP:~/deploy-script.sh

          # Execute the script with required environment variables
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "DOCKER_USERNAME='${{ secrets.DOCKER_HUB_USERNAME }}' DOCKER_TOKEN='${{ secrets.DOCKER_HUB_TOKEN }}' DB_USER='${{ secrets.DB_USER || 'admin' }}' DB_PASS='${{ secrets.DB_PASS || 'your_db_password' }}' DB_NAME='${{ secrets.DB_NAME || 'pokedex_db' }}' DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY || 'django-insecure-key' }}' bash ~/deploy-script.sh"

          # Verify deployment
          echo "Verifying deployment..."
          ssh -i ~/.ssh/terraform-ec2 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "docker ps && echo 'Service ports:' && sudo netstat -tulpn | grep -E ':(80|3000)'"
  # 4. Health Check
  health-check:
    name: Health Check
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check application availability
        run: |
          INSTANCE_IP="${{ needs.deploy.outputs.instance_ip }}"

          echo "Waiting for services to fully start..."
          sleep 30

          echo "Checking frontend at http://$INSTANCE_IP"
          curl -s -f -m 10 -L "http://$INSTANCE_IP" || echo "Frontend not available yet"

          echo "Checking backend API at http://$INSTANCE_IP:3000/admin/"
          curl -s -f -m 10 "http://$INSTANCE_IP:3000/admin/" || echo "Backend API not available yet"

          echo "Application URLs:"
          echo "Frontend: http://$INSTANCE_IP"
          echo "Backend API: http://$INSTANCE_IP:3000"
